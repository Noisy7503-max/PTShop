from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from keyboards.keyboard import *
from states.dispatcher import UserState
from handlers.admin import ADMIN_ID
from config.config import CHANNEL_ID
import secrets, aiosqlite



router = Router()
@router.message(F.text == 'üíµ –ü—Ä–æ–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def choose_game(message: types.Message) -> None:
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n<b>–í–ê–ñ–ù–û!</b> <i>–ù–∞ –æ–¥–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–≤–∞ –∏ –±–æ–ª–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è</i>', reply_markup=game_keyboard)


def get_game_name(token):
    abbreviation = token[:2].upper()
    game_abbreviations = {
        "BS": "Brawl Stars",
        "CR": "Clash Royale",
        "CC": "Clash of Clans",
        "PM": "Pubg Mobile",
        "ML": "Mobile Legends",
        "RB": "Roblox",
        "ST": "Standoff 2"
    }
    return game_abbreviations.get(abbreviation)

@router.callback_query(lambda c: c.data.startswith(('BS_', 'CR_', 'CC_', 'PM_', 'ML_', 'RB_', 'ST_')))
async def first_step(callback: types.CallbackQuery, state: FSMContext) -> None:
    user_id = callback.from_user.id
    global token
    token_1 = callback.data
    token_2 = secrets.token_urlsafe(8) 
    token = token_1 + token_2
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    await cursor.execute('INSERT into ads (saller_id, token_ad) VALUES (?, ?)', (user_id, token))
    await connect.commit()
    await callback.message.answer(f'<b>–î–æ–±–∞–≤—å—Ç–µ –¥–æ —Ç—Ä–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –∑–∞—è–≤–∫—É(—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ). –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ!</b>\n\n–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –µ–π —Å –±–æ–ª—å—à–∏–º —à–∞–Ω—Å–æ–º –ø—Ä–æ–π—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é', reply_markup=back_keyboard)
    await state.set_state(UserState.waiting_for_media_1)
    await cursor.close()
    await connect.close()

async def cont(message: types.Message, state: FSMContext):
    await message.reply("<b>–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–º—É –∏–≥—Ä–æ–≤–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É</b>\n\n–°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º, –∏ —Ç–æ–≥–¥–∞ —à–∞–Ω—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã—Ä–∞—Å—Ç–µ—Ç –≤ —Ä–∞–∑—ã. ")
    await state.set_state(UserState.waiting_for_description)

@router.message(F.text == '‚úÖ –î–∞–ª–µ–µ')
async def continue_handler(message: types.Message, state: FSMContext):
    await cont(message, state)

@router.message(UserState.waiting_for_media_1)
async def handle_media(message: types.Message, state: FSMContext):
    global media_ids
    global media_types
    media_ids = []
    media_types = []
    file_id = message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id)
    await state.update_data(media_1=file_id)
    if len(media_ids) < 3: 
        media_ids.append(message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id))
        media_types.append("photo" if message.photo else ("video" if message.video else None))
        await state.set_state(UserState.waiting_for_media_2)
        await message.reply("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –º–µ–¥–∏–∞(–Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –î–∞–ª–µ–µ, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>", reply_markup=con_keyboard)     
    else:   
        await cont(message, state)
    
@router.message(UserState.waiting_for_media_2)
async def handle_media(message: types.Message, state: FSMContext):
    file_id = message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id)
    await state.update_data(media_2=file_id)
    if len(media_ids) < 3: 
        media_ids.append(message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id))
        media_types.append("photo" if message.photo else ("video" if message.video else None))
        await state.set_state(UserState.waiting_for_media_3)
        await message.reply("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –º–µ–¥–∏–∞(–Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –î–∞–ª–µ–µ, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>", reply_markup=con_keyboard)
    else:   
        await cont(message, state)

@router.message(UserState.waiting_for_media_3)
async def handle_media(message: types.Message, state: FSMContext):
    file_id = message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id)
    await state.update_data(media_3=file_id)
    if len(media_ids) < 3: 
        media_ids.append(message.media_group_id if message.media_group_id else message.photo[-1].file_id if message.photo else (message.video.file_id if message.video else message.document.file_id))
        media_types.append("photo" if message.photo else ("video" if message.video else None))
        await state.set_state(UserState.waiting_for_media_3)
        await cont(message, state)   

@router.message(UserState.waiting_for_description)
async def handle_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.reply("<b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await state.set_state(UserState.waiting_for_price)

@router.message(UserState.waiting_for_price)
async def handle_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(UserState.mail)
    await message.answer('<b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n–í–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ. –°–æ–≤–µ—Ç—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ—á—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç—É –ø–æ—á—Ç—É. –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã</b>')
    
@router.message(UserState.mail)
async def mail_handle(message: types.Message, state: FSMContext):
    await state.update_data(mail=message.text)
    await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã')
    await state.set_state(UserState.password)

@router.message(UserState.password)
async def mail_handle(message: types.Message, state: FSMContext):
    await state.update_data(password=message.text)
    await state.set_state(UserState.idle)
    await message.answer('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏!</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üèÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...', reply_markup=fin_keyboard)
    
    
@router.message(F.text == 'üèÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å')
async def send_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data() 
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    token_ad = await cursor.execute('SELECT token_ad FROM ads WHERE saller_id = ?', (user_id,))
    token_ad = await token_ad.fetchone()
    game_name = get_game_name(token_ad[0])

    media_items = [] 

    for file_id, media_type in zip(media_ids, media_types):
        if media_type == 'photo':
            media_items.append(InputMediaPhoto(media=file_id))
        if media_type == 'video':
            media_items.append(InputMediaVideo(media=file_id))

    mail = data['mail']
    password = data['password']
    description = data['description']
    cost = int(data['price'])
    percent = round(int(cost * 0.2))
    price = int(percent + cost)

    while len(media_ids) < 3:
        media_ids.append(None)
    while len(media_types) < 3:
        media_types.append(None)

    caption = f"üéÆ {game_name} üéÆ\n\nüíµ –¶–µ–Ω–∞: {price}\n\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {description}"
    caption_for_admin = caption + f'\n–ü–æ—á—Ç–∞: {mail}\n–ü–∞—Ä–æ–ª—å: {password}'

    await cursor.execute('UPDATE ads SET about = ?, file_1 = ?, media_type1 = ?, file_2 = ?, media_type2 = ?, file_3 = ?, media_type3 = ?, cost = ?, game_name = ?, mail = ?, password = ?, percentage = ?, full_description = ? WHERE saller_id = ? AND token_ad = ?', (description, media_ids[0], media_types[0], media_ids[1], media_types[1], media_ids[2], media_types[2], price, game_name, mail, password, percent, caption, user_id, token_ad[0]))
    await connect.commit()
    

    await message.bot.send_media_group(ADMIN_ID, media=media_items)
    await message.bot.send_message(ADMIN_ID, caption_for_admin, reply_markup=InlineKeyboardMarkup(inline_keyboard=
                                    [
        [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.from_user.id}_{token_ad}")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{message.from_user.id}_{token_ad}")]
    ]))
    await message.answer(f'<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...', reply_markup=back_keyboard)
    await cursor.close()
    await connect.close()

    

@router.callback_query(lambda c: c.data.startswith('accept_'))
async def process_callback_accept(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.data.split('_')[1]
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    token_ad = await cursor.execute('SELECT token_ad FROM ads WHERE saller_id = ?', (user_id,))
    token_ad = await token_ad.fetchone()
    caption = await cursor.execute('SELECT full_description FROM ads WHERE saller_id = ?', (user_id,))
    caption = await caption.fetchone()
    about_ad = await cursor.execute('SELECT file_1, media_type1, file_2, media_type2, file_3, media_type3 FROM ads WHERE saller_id = ?', (user_id,))
    about_ad = await about_ad.fetchone()
    file_1, media_type1, file_2, media_type2, file_3, media_type3, = about_ad

    media_ids = [file_1, file_2, file_3]
    media_types = [media_type1, media_type2, media_type3]
    media_items = []

    for file_id, media_type in zip(media_ids, media_types):
        if media_type == 'photo':
            media_items.append(InputMediaPhoto(media=file_id))
        if media_type == 'video':
            media_items.append(InputMediaVideo(media=file_id))

    url = f'https://t.me/pt_shop_account_bot?start={token_ad[0]}'

    if media_items: 
        media_items[0].caption = f"{caption[0]}\n\n<a href='{url}'>–ö–£–ü–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢</a>" 
        media_items[0].parse_mode = ParseMode.HTML

        await callback.message.bot.send_media_group(CHANNEL_ID, media=media_items)
       
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.bot.send_message(int(user_id), "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=yoo_keyboard)
    await callback.answer('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞')
    await state.clear()
    await cursor.close()
    await connect.close()

@router.callback_query(lambda c: c.data.startswith('decline_'))
async def process_callback_decline(callback: types.CallbackQuery, state: FSMContext):
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    user_id = callback.data.split('_')[1]
    token_ad = await cursor.execute('SELECT token_ad FROM ads WHERE saller_id = ?', (user_id,))
    token_ad = await token_ad.fetchone()
    await cursor.execute('DELETE FROM ads WHERE token_ad = ?', (token_ad[0],))
    await connect.commit()
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    await callback.message.bot.send_message(int(user_id), "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.answer('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    await state.clear()
    await cursor.close()
    await connect.close()

    