from aiogram import types, F, Router
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from yoomoney import Quickpay
from keyboards.keyboard import *
from states.dispatcher import client
from datetime import timedelta
import aiosqlite, uuid, asyncio

router = Router()
tasks = {}

@router.message(F.text == 'üéÆ –ö—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def buy_handler(message: types.Message) -> None:
    await message.answer('<b>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –ø–æ—Å—Ç</b>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/ptshopgames')]]))


async def search_ad(message: types.Message, ad_token):
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    global token_ad
    token_ad = ad_token
    about_ad = await cursor.execute('SELECT about, file_1, media_type1, file_2, media_type2, file_3, media_type3, cost, game_name, mail, password FROM ads WHERE token_ad = ?', (ad_token,))
    about_ad = await about_ad.fetchone()
    if about_ad == None:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –≤ –ø—Ä–æ–¥–∞–∂–µ :( ')
    else:
        global mail
        global password
        about, file_1, media_type1, file_2, media_type2, file_3, media_type3, cost, game_name, mail, password = about_ad
        media_ids = [file_1, file_2, file_3]
        media_types = [media_type1, media_type2, media_type3]
        media_items = []

        for file_id, media_type in zip(media_ids, media_types):
            if media_type == 'photo':
                media_items.append(InputMediaPhoto(media=file_id))
            if media_type == 'video':
                media_items.append(InputMediaVideo(media=file_id))

        caption = f"üéÆ {game_name} üéÆ\n\nüíµ –¶–µ–Ω–∞: {cost}\n\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {about}"

        if media_items: 
            media_items[0].caption = caption 
            media_items[0].parse_mode = ParseMode.HTML
        
        global label
        label = str(uuid.uuid4())

        quickpay = Quickpay(
                receiver="4100118970052190", # –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                quickpay_form="shop", # –≠—Ç–æ —è —Ö–∑ –∑–∞—á–µ–º, –Ω–æ —è —ç—Ç–æ –Ω–µ —Ç—Ä–æ–≥–∞—é
                targets="Pay an account", # –¶–µ–ª–∏, —è –∏—Ö –Ω–µ –∏–∑–º–µ–Ω—è—é, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Å–æ–±–æ–π –Ω—É–∂–¥—ã –≤ —ç—Ç–æ–º –Ω–µ—Ç.
                paymentType="SB", # –≠—Ç–æ –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å
                sum=cost, # –≠—Ç–æ —Å—É–º–º–∞
                label=label # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–ª–∞—Ç—ã
                )
        pay_url = quickpay.base_url

        await message.bot.send_media_group(message.from_user.id, media=media_items)
        await message.answer(f'<b>–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞</b>\n\n<a href="{pay_url}">–°–°–´–õ–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–´</a>\n\n–í–ù–ò–ú–ê–ù–ò–ï!\n<i>–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ</i> <b>–û–ø–ª–∞—Ç–∏–ª</b> <i>–≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω—ã –ø–æ—á—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏–¥—ë—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —ç—Ç–æ–π –ø–æ—á—Ç—ã. –î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –Ω—É–∂–Ω–æ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É. –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—è –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–¥–µ–ª–∫—É, –±–æ—Ç —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ –≤–∞—Å. –í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</i>', reply_markup=pay_keyboard, parse_mode='HTML', disable_web_page_preview=True)
        await cursor.close()
        await connect.close()

@router.callback_query(F.data == 'pay')
async def pay_handler(callback: types.CallbackQuery):
    history = client.operation_history(label=label) 

    if history.operations == []:
        await callback.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    for operation in history.operations:
        if operation.status == 'success':
            await callback.answer("–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞!")
            user_id = callback.from_user.id
            ad_id = token_ad
            connect = await aiosqlite.connect('./data/db.db')
            cursor = await connect.cursor()
            about_ad = await cursor.execute('SELECT saller_id, about, file_1, media_type1, file_2, media_type2, file_3, media_type3, cost, game_name, mail, password, percentage FROM ads WHERE token_ad = ?', (token_ad,))
            about_ad = await about_ad.fetchone()
            saller_id, about, file_1, media_type1, file_2, media_type2, file_3, media_type3, cost, game_name, mail, password, percentage = about_ad
            media_ids = [file_1, file_2, file_3]
            media_types = [media_type1, media_type2, media_type3]
            await cursor.execute('DELETE FROM ads WHERE ad_token = ?', (token_ad,))
            await connect.commit()
            await cursor.execute('INSERT into in_sall (saller_id, token_ad, about, file_1, media_type1, file_2, media_type2, file_3, media_type3, cost, game_name, mail, password, percentage) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', (saller_id, token_ad, about, media_ids[0], media_types[0], media_ids[1], media_types[1], media_ids[2], media_types[2], cost, game_name, mail, password, percentage))
            await connect.commit()
            await callback.message.answer(f'<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç</b>\n\n–ü–æ—á—Ç–∞: {mail}\n–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã: {password}\n\n<i>–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–ø–µ—Ä–≤–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø–æ—á—Ç—É</i>', reply_markup=finish_keyboard)
            await cursor.close()
            await connect.close()
            await schedule_auto_completion(callback.message, user_id, ad_id)


@router.message(F.text == 'ü§ù –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É')
async def finish_handler(message: types.Message):
    await message.answer('<b>–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É?</b>\n\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ –ø–ª–∞—Ç–∞ –∑–∞ –∞–∫–∫–∞—É–Ω—Ç –ø–µ—Ä–µ–π–¥–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü—É. –í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=finish_da_keyboard)

@router.message(F.text == 'ü§ù –î–∞, –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É')
async def finish_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in tasks:
        ad_id = tasks[user_id].get("ad_id")
        tasks[user_id]["event"].set() 

        try:
            tasks[user_id]["task"].cancel()
            await tasks[user_id]["task"] 
        except asyncio.CancelledError:
            pass 

        del tasks[user_id]
        if ad_id:
            await complete_transaction(message, ad_id)
            

async def schedule_auto_completion(message, user_id, ad_id):
    event = asyncio.Event()
    task = asyncio.create_task(delayed_execution(message, event, user_id, ad_id))
    tasks[user_id] = {"task": task, "event": event, "ad_id": ad_id}


async def delayed_execution(message: types.Message, event, user_id, ad_id):
    try:
        await asyncio.sleep(timedelta(hours=48).total_seconds())
        if not event.is_set(): 
            await complete_transaction(message, ad_id)
    except asyncio.CancelledError:
        pass 

async def complete_transaction(message, ad_id):
    try:
        async with aiosqlite.connect("./data/db.db") as connect:
            async with connect.cursor() as cursor:

                await cursor.execute('SELECT saller_id, token_ad FROM ads WHERE token_ad = ?', (ad_id,))
                result = await cursor.fetchone()

                if result:
                    saller_id, token_ad = result
                    full_name = message.from_user.full_name
                    username = message.from_user.username
                    user_id = message.from_user.id
                    url_user = f'https://t.me/{username}'

                    await message.bot.send_message(user_id, f'–°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–∫—É–ø–∫—É!')
                    await message.bot.send_message(saller_id, f'<b>–°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å!\n–í–∞—à –ø–æ–∫—É–ø–∞—Ç–µ–ª—å: <a href="{url_user}">{full_name}</a></b>\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ...', reply_markup=back_keyboard, disable_web_page_preview=True)

                    await cursor.execute('SELECT sum FROM users WHERE user_id = ?', (saller_id,))
                    saller_sum = await cursor.fetchone()

                    await cursor.execute('SELECT percentage, cost FROM ads WHERE token_ad = ?', (token_ad,))
                    summa = await cursor.fetchone()
                    percent, cost = summa

                    check = int(cost) - int(percent)
                    saller_sum = int(saller_sum[0]) + check

                    await cursor.execute('UPDATE users SET sum = ? WHERE user_id = ?', (saller_sum, saller_id))
                    await connect.commit()


    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")




  

