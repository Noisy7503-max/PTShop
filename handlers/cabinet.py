from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from keyboards.keyboard import * 
from config.config import YOO_TOKEN, YOO_ACCOUNT
from states.dispatcher import YooState
import html, aiosqlite, uuid, requests, logging, json

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
router = Router()

@router.message(F.text == 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def cabinet(message: types.Message):
    connect = await aiosqlite.connect('./data/db.db')
    cursor = await connect.cursor()
    saller_sum = await cursor.execute('SELECT sum FROM users WHERE user_id = ?', (message.from_user.id,))
    saller_sum = await saller_sum.fetchone()
    await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {html.escape(message.from_user.full_name)}</b>!\n\n–°—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {saller_sum[0]} —Ä—É–±–ª–µ–π\n<i>–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...</i>', reply_markup=yoo_keyboard)
    await cursor.close()
    await connect.close()
        
def make_p2p_transfer(from_account, to_account, amount, comment):
    idempotence_key = str(uuid.uuid4())
    data = {
        "amount": {
            "value": amount,
            "currency": "RUB"
        },
        "source": { 
            "type": "account",
            "account_number": from_account
        },
        "payee": {
            "type": "account",
            "account_number": to_account
        },
        "comment": comment,
        "message": "–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
        "fee_payer": "payee" # –ö—Ç–æ –ø–ª–∞—Ç–∏—Ç –∫–æ–º–∏—Å—Å–∏—é
    }

    json_data = json.dumps(data, ensure_ascii=False).encode('utf-8')
    
    headers = {
        "Authorization": f"Bearer {YOO_TOKEN}",
        "Content-Type": "application/json; charset=UTF-8",
        "Idempotence-Key": idempotence_key
    }

    
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: {data}")

    response = requests.post("https://yoomoney.ru/api/request-payment", headers=headers, data=json_data)

    try:
        response_text = response.content.decode('utf-8') # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    except UnicodeDecodeError:
        response_text = response.content # –ï—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç API. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    logging.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} {response_text}")

    try:
        response_json = response.json()
    except json.JSONDecodeError:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {response.text}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ÆMoney"}

    if response.status_code == 200:
        if "error" in response_json:
            error_code = response_json.get("error")
            error_description = response_json.get("description", "Unknown error")
            logging.error(f"–û—à–∏–±–∫–∞ –ÆMoney: {error_code} - {error_description}")
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ÆMoney: {error_description} (–∫–æ–¥ {error_code})", "code": error_code}
        else:
            operation_id = response_json.get("operation_id")
            logging.info(f"–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. ID –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_id}")
            return {"status": "success", "operation_id": operation_id}
    else:
        error_message = response_json.get("description", "Unknown error")
        logging.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status_code} - {error_message}")
        return {"status": "error", "message": f"HTTP Error: {response.status_code} - {error_message}", "status_code": response.status_code}


@router.callback_query(F.data == 'yoo_pay')
async def yoo_pay_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(YooState.num_account)
    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>', reply_markup=back_keyboard)

@router.message(YooState.num_account)
async def yoo_state(message: types.Message, state: FSMContext):
    num_acc = message.text.strip()
    await state.update_data(num_acc=num_acc)
    await state.set_state(YooState.idle) # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ YooState.idle —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_id = message.from_user.id

    async with aiosqlite.connect("./data/db.db") as connect:
        async with connect.cursor() as cursor:
            await cursor.execute('SELECT sum FROM users WHERE user_id = ?', (user_id,))
            saller_sum = await cursor.fetchone()

            if saller_sum:
                amount = "{:.2f}".format(float(saller_sum[0]))
                result = make_p2p_transfer(YOO_ACCOUNT, num_acc, amount, "–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")

                if result['status'] == "success":
                    await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {num_acc}\n–°—É–º–º–∞: {saller_sum[0]} —Ä—É–±–ª–µ–π', reply_markup=back_keyboard)

                    await cursor.execute('UPDATE users SET sum = 0 WHERE user_id = ?', (user_id,))
                    await connect.commit()
                else:
                    error_message = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    error_code = result.get("code")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {error_message}. –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {error_message}, code: {error_code}, status_code: {result.get('status_code', 'Unknown')}")


    await state.clear()